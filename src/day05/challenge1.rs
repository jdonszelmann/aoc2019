use crate::day02::challenge1::{Instruction, ADD, CPU, MUL, STOP};

pub const INP: &Instruction = &|cpu, _params, directparams| {
    if cpu.inpoffset >= cpu.input.len() as isize {
        cpu.program[directparams[0]] = (cpu.input_cb)(cpu, -1);
    } else {
        let value = cpu.input[cpu.inpoffset as usize];
        cpu.inpoffset += 1;
        cpu.program[directparams[0]] = (cpu.input_cb)(cpu, value);
    }
    true
};

pub const OUT: &Instruction = &|cpu, params, _directparams| {
    let value = params[0];
    cpu.outputbuffer.push(value);
    (cpu.output_cb)(cpu, value);
    true
};

fn main_func(program: &str) -> String {
    let mut cpu = CPU::from(program);

    cpu.set_input(vec![1]);

    cpu.add_instruction(1, 4, ADD);
    cpu.add_instruction(2, 4, MUL);
    cpu.add_instruction(99, 1, STOP);
    cpu.add_instruction(3, 2, INP);
    cpu.add_instruction(4, 2, OUT);

    cpu.run();

    cpu.program_to_string()
}

fn get_output(program: &str, inputs: Vec<isize>) -> Vec<isize> {
    let mut cpu = CPU::from(program);

    cpu.set_input(inputs);

    cpu.add_instruction(1, 4, ADD);
    cpu.add_instruction(2, 4, MUL);
    cpu.add_instruction(99, 1, STOP);
    cpu.add_instruction(3, 2, INP);
    cpu.add_instruction(4, 2, OUT);

    cpu.run();

    cpu.get_output().to_vec()
}

#[cfg(test)]
mod test {
    use crate::day05::challenge1::{get_output, main_func};

    #[test]
    fn test_main_real() {
        let input = include_str!("input");
        let result = get_output(input, vec![1]);
        //        assert_eq!(result, value);
        println!("challenge 5.1: {:?}", result);
    }

    #[test]
    fn test_main_1() {
        assert_eq!(main_func("1002,4,3,4,33"), "1002,4,3,4,99");
    }

    #[test]
    fn test_main_2() {
        assert_eq!(main_func("2,3,3,3,99"), "2,3,3,9,99");
    }

    #[test]
    fn test_main_3() {
        assert_eq!(main_func("4,0,99"), "4,0,99");
    }

    #[test]
    fn test_main_4() {
        assert_eq!(main_func("11101,0,0,0,99"), "0,0,0,0,99");
    }

    #[test]
    fn test_main_5() {
        assert_eq!(main_func("11101,0,-1,0,99"), "-1,0,-1,0,99");
    }

    #[test]
    fn test_main_6() {
        assert_eq!(get_output("4,0,99", vec![1]), vec![4]);
    }

    #[test]
    fn test_main_7() {
        assert_eq!(get_output("104,0,99", vec![1]), vec![0]);
    }

    #[test]
    fn test_main_9() {
        assert_eq!(get_output("1002,4,3,4,33", vec![17]), vec![]);
    }

    #[test]
    fn test_main_10() {
        assert_eq!(get_output("3,0,4,0,99", vec![17]), vec![17]);
    }

    #[test]
    fn test_main_11() {
        assert_eq!(get_output("3,225,1,225,6,6,1100,1,238,225,104,0,1101,78,5,225,1,166,139,224,101,-74,224,224,4,224,1002,223,8,223,1001,224,6,224,1,223,224,223,1002,136,18,224,101,-918,224,224,4,224,1002,223,8,223,101,2,224,224,1,224,223,223,1001,83,84,224,1001,224,-139,224,4,224,102,8,223,223,101,3,224,224,1,224,223,223,1102,55,20,225,1101,53,94,225,2,217,87,224,1001,224,-2120,224,4,224,1002,223,8,223,1001,224,1,224,1,224,223,223,102,37,14,224,101,-185,224,224,4,224,1002,223,8,223,1001,224,1,224,1,224,223,223,1101,8,51,225,1102,46,15,225,1102,88,87,224,1001,224,-7656,224,4,224,102,8,223,223,101,7,224,224,1,223,224,223,1101,29,28,225,1101,58,43,224,1001,224,-101,224,4,224,1002,223,8,223,1001,224,6,224,1,224,223,223,1101,93,54,225,101,40,191,224,1001,224,-133,224,4,224,102,8,223,223,101,3,224,224,1,223,224,223,1101,40,79,225,4,223,99,0,0,0,677,0,0,0,0,0,0,0,0,0,0,0,1105,0,99999,1105,227,247,1105,1,99999,1005,227,99999,1005,0,256,1105,1,99999,1106,227,99999,1106,0,265,1105,1,99999,1006,0,99999,1006,227,274,1105,1,99999,1105,1,280,1105,1,99999,1,225,225,225,1101,294,0,0,105,1,0,1105,1,99999,1106,0,300,1105,1,99999,1,225,225,225,1101,314,0,0,106,0,0,1105,1,99999,1008,226,677,224,1002,223,2,223,1005,224,329,1001,223,1,223,1107,226,677,224,1002,223,2,223,1005,224,344,1001,223,1,223,8,677,226,224,1002,223,2,223,1006,224,359,1001,223,1,223,1108,226,677,224,1002,223,2,223,1006,224,374,101,1,223,223,1007,677,677,224,102,2,223,223,1006,224,389,1001,223,1,223,8,226,677,224,102,2,223,223,1006,224,404,101,1,223,223,1007,226,226,224,1002,223,2,223,1006,224,419,101,1,223,223,107,677,226,224,1002,223,2,223,1006,224,434,1001,223,1,223,1007,226,677,224,102,2,223,223,1005,224,449,101,1,223,223,1107,226,226,224,1002,223,2,223,1005,224,464,1001,223,1,223,107,226,226,224,102,2,223,223,1006,224,479,101,1,223,223,108,226,226,224,1002,223,2,223,1006,224,494,101,1,223,223,107,677,677,224,102,2,223,223,1005,224,509,1001,223,1,223,1008,677,677,224,1002,223,2,223,1006,224,524,101,1,223,223,1107,677,226,224,102,2,223,223,1006,224,539,1001,223,1,223,108,677,226,224,102,2,223,223,1006,224,554,1001,223,1,223,1108,677,226,224,102,2,223,223,1005,224,569,1001,223,1,223,8,677,677,224,1002,223,2,223,1005,224,584,1001,223,1,223,7,677,677,224,1002,223,2,223,1005,224,599,101,1,223,223,1108,226,226,224,102,2,223,223,1006,224,614,101,1,223,223,1008,226,226,224,1002,223,2,223,1005,224,629,101,1,223,223,7,677,226,224,102,2,223,223,1006,224,644,1001,223,1,223,7,226,677,224,102,2,223,223,1005,224,659,101,1,223,223,108,677,677,224,1002,223,2,223,1006,224,674,101,1,223,223,4,223,99,226",
                              vec![1]), vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 13210611]);
    }

    #[test]
    fn test_main_12() {
        assert_eq!(main_func("3,1,99"), "3,1,99");
    }
}
